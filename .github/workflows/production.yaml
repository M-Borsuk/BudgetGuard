name: Build production branch CI/CD

on:
  push:
    branches:
        - "production"

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PAT: ${{ secrets.PAT }}

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    name: Build production branch & Create release & Push docker image to ECR [CI/CD]
    if: ${{ !contains(github.event.head_commit.message, 'âœ… Bump version from') }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
            ref: ${{ github.ref }}
            token: ${{ env.PAT }}

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install poetry and testing dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox tox-gh-actions poetry==1.4.2 bump2version

      - name: Run tox
        run: tox
  
      - name: Get current version and new version from VERSION file
        run: |
            RAW_OUTPUT=$(bumpversion --list minor --dry-run)
            OLD_VERSION=$(echo "$RAW_OUTPUT" | grep -o 'current_version=\S*' | cut -d= -f2)
            NEW_VERSION=$(echo "$RAW_OUTPUT" | grep -o 'new_version=\S*' | cut -d= -f2)
            echo "Current Version: $OLD_VERSION"
            echo "New Version: $NEW_VERSION"
            echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
            echo "OLD_VERSION=${OLD_VERSION}" >> $GITHUB_ENV

      - name: Bump version
        run: |
            bump2version minor --allow-dirty --new-version ${{ env.NEW_VERSION }} --verbose
      
      - name: Update requirements.txt for release
        run: |
            poetry export -f requirements.txt --output requirements.txt --without-hashes
      
      - name: Commit version bump
        run: |
            git config --local user.email "actions@github.com"
            git config --local user.name "GitHub Actions"
            git commit -a -m "âœ… Bump version from ${{ env.OLD_VERSION }} to ${{ env.NEW_VERSION }} by Github Actions Bot ðŸ¤–"

      - name: Push changes to protected branch
        uses: ad-m/github-push-action@master
        with:
            github_token: ${{ env.GITHUB_TOKEN }}
            branch: production
    
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            tag_name: v${{ env.NEW_VERSION }}
            release_name: Release v${{ env.NEW_VERSION }}
            draft: false
            prerelease: false

      - name: Configure poetry
        env:
          pypi_token: ${{ secrets.PyPI_TOKEN }}
        run: poetry config pypi-token.pypi $pypi_token
    
      - name: Build and publish
        run: poetry publish --build
      
      - name: Sleep for 2 minutes (waiting for PyPI to update)
        uses: jakejarvis/wait-action@master
        with:
          time: '120s'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: budget-guard
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.NEW_VERSION }} --build-arg VERSION=${{ env.NEW_VERSION }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.NEW_VERSION }}
      
      - name: Upload AWS MWAA requirements to S3 bucket
        uses: hkusu/s3-upload-action@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-bucket: ${{ secrets.AWS_BUCKET }}
          file-path: 'requirements-mwaa.txt'
          destination-dir: 'requirements-mwaa.txt'

      - name: Upload AWS MWAA DAGs to S3 bucket
        uses: shallwefootball/s3-upload-action@master
        with:
          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_bucket: ${{ secrets.AWS_BUCKET }}
          source_dir: './budgetguard/budgetguard/dags'
          destination_dir: 'dags'